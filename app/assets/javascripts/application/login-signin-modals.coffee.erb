# This code is present to facilitate sign in / sign-up from the www. marketing
# site via modal forms. Make the same calls as the ember API would, then we have
# to set the localStorage content to match the Ember-Simple-Auth expectations.
# This code is dependent on:
# - Ember simple auth localStorage key/value names/entries
# - Authenticator types "password" and "hello"
# - Redirect location (currently set to /app/users/dashboard)


#########################################
# Utility methods for sign up / sign in #
#########################################

setAuthenticationLocalstorageContent = (authenticationType, userEmail, userID, userToken) ->
  # Sets the localstorage content to what ember-simple-auth will expect when booting the app
  window.localStorage.setItem('ember_simple_auth:authenticatorFactory', "authenticator:#{authenticationType}")
  window.localStorage.setItem('ember_simple_auth:user_email', userEmail)
  window.localStorage.setItem('ember_simple_auth:user_id', userID)
  window.localStorage.setItem('ember_simple_auth:user_token', userToken)

redirectToApp = ->
  # Redirects to the user's dashboard (within the ember app)
  scheme  = window.location.protocol  # http: | https:
  host    = window.location.host      # mydomain.com
  window.location.replace "#{scheme}//#{host}/app/user/dashboard"

resetSocialButtons = ->
  $(".JS-login-with-facebook").button('reset')
  $(".JS-login-with-google").button('reset')

extractErrorMessageFrom = (responseJSON) ->
  if !responseJSON?
    "We're sorry, something went wrong. Please try again."
  else if responseJSON.message
    responseJSON.message
  else
    message = "Sorry -"
    for own key, value of responseJSON
        message += " that #{key} "
        message += "#{value},"
    message = message.substring(0, message.length - 1)
    message += "."
    message

completeSignUpABTests = (cb) ->
  $.post('/complete_sign_in_tests', -> cb())


#########################################
# Launching the sign up / sign in modal #
#########################################

launchSignInSignUpModal = ->
  $('#JS-sign-in-sign-up-modal').modal();

handleClickWithModal = ($launcherElement, $tabToShow) ->
  $launcherElement.on 'click', (e) ->
    e.preventDefault()
    launchSignInSignUpModal()
    $tabToShow.tab('show')
    return false # Prevent further bubbling of the anchor click


##########################################
# Sign in / Sign up via email & password #
##########################################

handleEmailPasswordSignIn = ($form, $button) ->
  # User filled out email/password in the form and submitted. Check validity,
  # set tokens, and redirect into the app.

  setButtonLoading = ->
    $button.button('loading')
  resetButton = ->
    $button.button('reset')

  $form.on 'submit', (e) ->
    e.preventDefault()
    formContent = $(@).serialize()
    setButtonLoading()

    $.ajax
      type: 'POST'
      url: '<%= ENV['API'] %>' + '/session'
      data: formContent
      success: (response) ->
        setAuthenticationLocalstorageContent("password", response.user_email, response.user_id, response.user_token)
        redirectToApp()
      error: (jqXHR) ->
        resetButton()
        alert extractErrorMessageFrom(jqXHR.responseJSON)

    return false # Prevent actual submission of the form

handleEmailPasswordSignUp = ($form, $button) ->
  # User filled out email/password/confirmation in sign up the form and
  # submitted. Create user, set tokens, and redirect into the app.

  setButtonLoading = ->
    $button.button('loading')
  resetButton = ->
    $button.button('reset')

  extractFormFieldValueFromArraySerialized = (arraySerialized, fieldName) ->
    $.grep(arraySerialized, (el) -> el.name == fieldName)[0].value

  $form.on 'submit', (e) ->
    e.preventDefault()

    # We can't just $.serialize the form, because we need to post under a 'user' hash key.
    arrayFormContent      = $(@).serializeArray()
    userEmail             = extractFormFieldValueFromArraySerialized(arrayFormContent, 'email')
    userPassword          = extractFormFieldValueFromArraySerialized(arrayFormContent, 'password')
    passwordConfirmation  = extractFormFieldValueFromArraySerialized(arrayFormContent, 'password_confirmation')

    if userPassword != passwordConfirmation
      alert "Your password confirmation does not match the provided password."
      return false

    if userPassword.length < 8
      alert "Your password must be at least 8 characters."
      return false

    setButtonLoading()

    # First create the user, and if successful, log them in. (Two distinct AJAX requests)
    $.ajax
      type: 'POST'
      url: '<%= ENV['API'] %>' + '/users'
      data:
        user:
          email: userEmail
          password: userPassword
          password_confirmation: passwordConfirmation
      success: () ->
        $.ajax
          type: 'POST'
          url: '<%= ENV['API'] %>' + '/session'
          data:
            email: userEmail
            password: userPassword
          success: (responseJSON) ->
            completeSignUpABTests( ->
              setAuthenticationLocalstorageContent("password", responseJSON.user_email, responseJSON.user_id, responseJSON.user_token)
              redirectToApp()
            )
          error: (jqXHR) -> # Error logging the user in
            resetButton()
            alert extractErrorMessageFrom(jqXHR.responseJSON)
      error: (jqXHR) -> # Error on creating the user
        resetButton()
        alert extractErrorMessageFrom(jqXHR.responseJSON)

    return false # Prevent actual submission of the form


###################################
# Sign in / Sign up via 3rd party #
###################################

handleOAuthLoginClick = ($button, provider) ->
  $button.on 'click', (e) ->
    e.preventDefault() # Don't submit the form
    $(@).button('loading')
    hello(provider).login()

clearHelloJsLocalstorage = ->
  localStorage.removeItem("hello")

helloApiError = () ->
  clearHelloJsLocalstorage()
  resetSocialButtons()
  alert 'There was an error connecting to your selected third-party service. Please try again later.'

extractUserDataFromJson = (json) ->
  {
    uid:    json.id
    name:   json.name
    email:  json.email
    image:  json.picture || json.thumbnail
  }

confirmUserIdentity = (userData) ->
  $.ajax
    type: 'POST'
    url: '<%= ENV['API'] %>' + '/session/check_oauth'
    data:
      user: userData
    success: (response) ->
      # Hello.js will automatically try to login if there data in localstorage.
      # This is not the behaviour we want. The ember-simple-auth localStorage
      # data will be single source of truth for logged-in state.
      clearHelloJsLocalstorage()

      finish = ->
        setAuthenticationLocalstorageContent("hello", response.user_email, response.user_id, response.user_token)
        redirectToApp()

      if response.is_new_user # Provided by rails backend when user was created from OAuth
        completeSignUpABTests(finish)
      else
        finish()

    error: (jqXHR) ->
      clearHelloJsLocalstorage()
      resetSocialButtons()
      alert extractErrorMessageFrom(jqXHR.responseJSON)

hello.on 'auth.login', (auth) ->
  # Get user details
  hello( auth.network ).api( '/me' ).success( (json) ->
    userData              = extractUserDataFromJson(json)
    userData.access_token = auth.authResponse.access_token
    userData.provider     = auth.network
    confirmUserIdentity(userData)
  , helloApiError)


##################################
# Set handlers on document ready #
##################################

$ ->
  handleClickWithModal $(".JS-launches-sign-in-modal"), $("#JS-sign-in-tab-link")
  handleClickWithModal $(".JS-launches-sign-up-modal"), $("#JS-sign-up-tab-link")

  handleEmailPasswordSignIn $("#JS-sign-in-form"), $("#JS-sign-in-button")
  handleEmailPasswordSignUp $("#JS-sign-up-form"), $("#JS-sign-up-button")

  handleOAuthLoginClick $(".JS-login-with-facebook"), 'facebook'
  handleOAuthLoginClick $(".JS-login-with-google"), 'google'
